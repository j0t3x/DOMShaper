{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 5802c962c03de541c052","webpack:///./src/index.js","webpack:///./src/shapes/Shape.js","webpack:///./src/shapes/ButtonShape.js","webpack:///./src/shapes/OptionShape.js","webpack:///./src/shapes/ImageShape.js","webpack:///./src/shapes/TextInputShape.js","webpack:///./src/shapes/TextShape.js","webpack:///./src/shapes/FormShape.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,IAAG;;AAEH;AACA;AACA;;AAEA,IAAG;AACH;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB,wBAAwB;;AAEzC;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,oBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,uCAAsC,SAAS;AAC/C;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA,yCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA,sBAAqB;;AAErB;;AAEA;;AAEA;;AAEA,mBAAkB,uBAAuB;;AAEzC;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AAGA;;;;;;;ACrMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;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","file":"domshaper.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"domshaper\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"domshaper\"] = factory();\n\telse\n\t\troot[\"domshaper\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5802c962c03de541c052","var Shape = require('./shapes/Shape.js');\nvar ButtonShape = require('./shapes/ButtonShape.js');\nvar OptionShape = require('./shapes/OptionShape.js');\nvar ImageShape = require('./shapes/ImageShape.js');\nvar TextInputShape = require('./shapes/TextInputShape.js');\nvar TextShape = require('./shapes/TextShape.js');\nvar FormShape = require('./shapes/FormShape.js');\n\nexports.Shape = Shape; \nexports.ButtonShape = ButtonShape;\nexports.OptionShape = OptionShape;\nexports.ImageShape = ImageShape;\nexports.TextInputShape = TextInputShape;\nexports.TextShape = TextShape;\nexports.FormShape = FormShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0","var Shape = function( elem, id ){\n\n  this.id = ( id )? id : null;\n  this.domElement;\n  this.childs = [];\n  this.classes = '';\n  this.parent;\n  this.needsRender = true;\n  this.attributes = {};\n\n  //fo the eventa\n  this.eventAndCallback = {};\n\n\n  if( !elem ){\n    throw 'Element should be a DOM node or a string literal';\n  }\n\n  if( typeof elem === 'string' ){\n    this.elementName = ( elem )? elem : null;\n  }\n\n  if( elem.nodeName ){\n    this.domElement = elem;\n  }\n\n};\n\nShape.prototype.appendShape = function( shapeToAppend ){\n\n  if( shapeToAppend instanceof Shape ){\n\n    //add the Shape object to the childs array\n    shapeToAppend.parent  = this;\n    this.childs.push( shapeToAppend );\n\n  }else if( typeof shapeToAppend === 'string' ){\n\n    var childShape = new Shape( shapeToAppend, null );\n    childShape.parent = this;\n    this.childs.push( childShape );\n\n  }else{\n    console.err('only shape or string as arguments, gtfo');\n    //we dont want to stop the main thread for this misuse\n  }\n\n};\n\nShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n  for( var attr in this.attributes){\n    this.domElement.setAttribute(attr,this.attributes[attr]);\n  }\n\n  for (var i = 0; i < this.childs.length; i++) {\n\n    if( !this.childs[i].domElement ){\n      this.childs[i].buildDom();\n    }\n\n\n    this.domElement.appendChild( this.childs[i].domElement );\n\n  }\n\n  for( var ev in this.eventAndCallback ){\n\n    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n\n  }\n\n\n};\n\nShape.prototype.render = function(){\n\n  if( !this.needsRender ){\n    this.render_();\n  }\n\n  if( this.childs ){\n    for (var i = 0; i < this.childs.length; i++) {\n      //render all childs shit\n      this.childs[i].render();\n    }\n  }\n\n  this.needsRender = false;\n\n};\n\nShape.prototype.render_ = function(){\n\n};\n\n//event listener\n//choose your listener using a string\nShape.prototype.on = function( event, callback ){\n  //all listener here? maybe :)\n  if( typeof event !== 'string' ){\n    throw 'use string identifiers for events';\n  }\n\n  this.eventAndCallback[event] = callback;\n\n};\n\nShape.prototype.removeAllChilds = function(){\n\n  while (this.domElement.firstChild) {\n    this.domElement.removeChild(this.domElement.firstChild);\n  }\n\n  for (var i = this.childs.length - 1; i >= 0 ; i--) {\n    this.childs[i].parent = null;\n    this.childs.splice(i, 1);\n  }\n\n};\n\n\nShape.prototype.removeShape = function( childShape ){\n\n  var reference;\n  if( childShape instanceof Shape ){\n    //add the Shape object to the childs array\n    for (var i = this.childs.length - 1; i >= 0; i--) {\n      if( this.childs[i] === childShape){\n        reference = this.childs.splice( i, 1 )[0];\n        break;\n      }\n    }\n\n  }else{\n    throw ': argument should be a Shape object';\n  }\n\n  //remove interface\n  if( reference )\n    this.domElement.removeChild( reference.domElement );\n\n  //return reference; this only make sense if the argument is a string literal referring a dom element name\n\n};\n\nShape.prototype.setClass = function(){\n\n  //you can set several classes like this 'clas1 class2 class3'\n\n  for ( var i = 0; i < arguments.length ; i++ ) {\n\n    if( typeof arguments[i] !== 'string' )\n      throw ': className should be a string literal';\n\n    this.classes += ( ' ' + arguments[i] );\n  }\n  //this.classes = classes;\n\n};\n\nShape.prototype.setId = function( id ){\n\n  //you can set several classes like this 'clas1 class2 class3'\n  if( typeof id !== 'string' )\n    throw ': id should be a string literal';\n\n  this.id = id;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n};\n\nShape.prototype.addAttr = function( name , value ){\n\n  //you can set several classes like this 'clas1 class2 class3'\n  if( typeof name !== 'string' )\n    throw ': name should be a string literal';\n\n  if( !value || (typeof value !== 'string' && typeof value !== 'number') )\n    throw ': value shouldnt be empty, use number or string';\n\n  this.attributes[name] = value;\n\n};\n\n\nmodule.exports = Shape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/Shape.js\n// module id = 1\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar ButtonShape = function( buttonText, id ){\n  Shape.call( this, 'button', id );\n  this.textContent = buttonText;\n};\n/*OOP herency*/\nButtonShape.prototype = Object.create( Shape.prototype );\nButtonShape.prototype.contructor = ButtonShape;\n/*OOP herency*/\n\nButtonShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.domElement.innerHTML = this.textContent;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n  for( var attr in this.attributes ){\n    this.domElement.setAttribute(attr,this.attributes[attr]);\n  }\n\n  for( var ev in this.eventAndCallback ){\n\n    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n\n  }\n\n\n};\n\n//t is a string with the text for the ButtonShape\nButtonShape.prototype.updateText = function( text ){\n    if( typeof text !== 'string' )\n      throw ': argument of updateText should be a string literal';\n\n    this.textContent = text;\n};\n\nButtonShape.prototype.render_ = function(){\n\n  if( this.textContent )\n    this.domElement.innerHTML = this.textContent;\n\n};\n\n\n\nmodule.exports = ButtonShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/ButtonShape.js\n// module id = 2\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar OptionShape = function( name, type ){\n\n  Shape.call( this, 'div', name );\n  if( typeof type !== 'string' )\n      throw 'indicate wether this is a radio or check group of options with a string';\n\n  this.type = '';\n  //setting input type, dom style\n  if( type === 'radio' )\n      this.type = 'radio';\n  else if( type === 'check' )\n      this.type = 'checkbox';\n\n  this.groupName = name;\n  this.structure = [];\n  this.domElements = [];\n  this.domElement;\n  this.changedOptionsValues = [];\n\n};\n/*OOP herency*/\nOptionShape.prototype = Object.create( Shape.prototype );\nOptionShape.prototype.contructor = OptionShape;\n/*OOP herency*/\n\nOptionShape.prototype.addOption = function( displayText, value, classForName, classForInput ){\n\n     if( !displayText || !value )\n          throw 'you should add an option with display and value arguments...';\n\n     this.structure.push({\n          display: displayText,\n          value: value,\n          classForName: ( classForName ) ? classForName : '',\n          classForInput: ( classForInput ) ? classForInput : ''\n     });\n\n};\n\nOptionShape.prototype.buildDom = function(){\n\n     this.domElement = document.createElement('div');\n\n     for (var i = 0; i < this.structure.length; i++ ) {\n\n          var optionUnit = {\n               container: document.createElement('div'),\n               input: null,\n               label: null,\n               name: null,\n               indicator: null\n          };\n\n          optionUnit.input = document.createElement('input');\n          optionUnit.input.type = this.type;\n          optionUnit.input.name = this.groupName;\n          optionUnit.input.value = this.structure[i].value;\n          optionUnit.input.className = this.structure[i].classForInput;\n          //optionUnit.container.appendChild( optionUnit.input );\n\n          optionUnit.label = document.createElement('label');\n          //optionUnit.label.innerHTML = this.structure[i].display;\n          optionUnit.label.className = this.structure[i].classForName;\n          optionUnit.label.appendChild( optionUnit.input );\n\n          optionUnit.name = document.createElement('span');\n          optionUnit.name.innerHTML = this.structure[i].display;\n          optionUnit.name.className = 'custom-control-description';\n          optionUnit.label.appendChild( optionUnit.name );\n\n          optionUnit.indicator = document.createElement('span');\n          optionUnit.indicator.className = 'custom-control-indicator';\n          optionUnit.label.appendChild( optionUnit.indicator );\n\n          optionUnit.container.appendChild( optionUnit.label );\n\n          optionUnit.container.className = 'form-check';\n\n          this.domElements.push( optionUnit );\n          //add the root dom element to attach to page\n          this.domElement.appendChild( optionUnit.container );\n\n     }\n\n     if( this.id )\n          this.domElement.id = this.id;\n\n     if( this.classes )\n          this.domElement.className += ' ' + this.classes;\n\n};\n\n//t is a string with the text for the OptionShape\nOptionShape.prototype.getSelectedOptions = function(){\n\n    var res = [];\n\n     for (var i = this.domElements.length; i--; ) {\n\n          if( this.domElements[i].input.checked )\n               res.push( this.domElements[i].input.value )\n\n     }\n\n     return res;\n};\n\nOptionShape.prototype.render_ = function(){\n\n     //no render need, yet\n\n};\n\n\nmodule.exports = OptionShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/OptionShape.js\n// module id = 3\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar ImageShape = function( src, id ){\n  Shape.call( this, 'img', id );\n\n  if( typeof src !== 'string' )\n    throw ': image src should be a string literal';\n\n  if( src ){\n    this.src = src;\n  }else{\n    throw ': 3rd input shouldnt be null';\n  }\n\n  this.width;\n  this.height;\n\n};\n/*OOP herency*/\nImageShape.prototype = Object.create( Shape.prototype );\nImageShape.prototype.contructor = ImageShape;\n/*OOP herency*/\n\nImageShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.domElement.src = this.src;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n  if( this.width )\n    this.domElement.width = this.width;\n\n\n  if( this.height )\n    this.domElement.height = this.height;\n\n\n};\n\nImageShape.prototype.render_ = function(){\n\n  this.domElement.src = this.src;\n\n  if( this.width )\n    this.domElement.style.width = this.width + 'px';\n\n  if( this.height )\n    this.domElement.style.height = this.height + 'px';\n\n};\n\nImageShape.prototype.changeImage = function( src ){\n\n  if( typeof src !== 'string' )\n    throw ': image src should be a string literal';\n\n  this.src = src;\n\n};\n\nImageShape.prototype.setWHpx = function( w, h ){\n\n  if( w && typeof w === 'number' ){\n    this.width = w;\n  }\n\n  if( h && typeof h === 'number' ){\n    this.height = h;\n  }\n\n};\n\nmodule.exports = ImageShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/ImageShape.js\n// module id = 4\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar TextInputShape = function( id ){\n  Shape.call( this, 'input', id );\n  this.textContent = '';\n  this.name = '';\n};\n/*OOP herency*/\nTextInputShape.prototype = Object.create( Shape.prototype );\nTextInputShape.prototype.contructor = TextInputShape;\n/*OOP herency*/\n\nTextInputShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.domElement.type = 'text';\n  this.domElement.value = this.textContent;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n  if( this.name )\n      this.domElement.setAttribute('name', this.name);\n\n  for( var attr in this.attributes){\n    this.domElement.setAttribute(attr,this.attributes[attr]);\n  }\n\n};\n\n//t is a string with the text for the TextInputShape\nTextInputShape.prototype.getVal = function(){\n    if( !this.domElement )\n      throw ': first build object DOM ->  buildDom()';\n\n    return this.domElement.value;\n};\n\n//t is a string with the text for the TextInputShape\nTextInputShape.prototype.setValue = function( value ){\n    if( typeof value !== 'string' )\n      throw ': argument of updateText should be a string literal';\n\n    this.textContent = value;\n};\n\nTextInputShape.prototype.render_ = function(){\n\n  if( this.textContent )\n    this.domElement.value = this.textContent;\n\n};\n\nTextInputShape.prototype.setName = function(){\n\n  //you can set several classes like this 'clas1 class2 class3'\n\n  for ( var i = 0; i < arguments.length ; i++ ) {\n\n    if( typeof arguments[i] !== 'string' )\n      throw ': Name should be a string literal';\n\n    this.name = arguments[i];\n  }\n\n};\n\nmodule.exports = TextInputShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/TextInputShape.js\n// module id = 5\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar TextShape = function( elem, id ){\n  Shape.call( this, elem, id );\n  this.textContent = '';\n};\n/*OOP herency*/\nTextShape.prototype = Object.create( Shape.prototype );\nTextShape.prototype.contructor = TextShape;\n/*OOP herency*/\n\nTextShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.domElement.innerHTML = this.textContent;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n\n};\n\n//t is a string with the text for the textShape\nTextShape.prototype.updateText = function( textContent ){\n\n    this.needsReRender = true;\n\n    if( typeof textContent !== 'string' )\n      throw ': argument of updateText should be a string literal';\n\n    this.textContent = textContent;\n\n};\n\nTextShape.prototype.render_ = function(){\n\n  if( this.textContent )\n    this.domElement.innerHTML = this.textContent;\n\n};\n\n\nmodule.exports = TextShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/TextShape.js\n// module id = 6\n// module chunks = 0","var Shape = require('./Shape.js');\nvar TextInputShape = require('./TextInputShape.js');\nvar ButtonShape = require('./ButtonShape.js');\nvar OptionShape = require('./OptionShape.js');\n\nvar FormShape = function( id ){\n  Shape.call( this, 'form', id );\n\n  //this.action = action;\n  this.method = '';\n  this.encoding = '';\n  this.submitTrigger;\n  this.data = {}; //remember this could be a file\n\n};\n/*OOP herency*/\nFormShape.prototype = Object.create( Shape.prototype );\nFormShape.prototype.contructor = FormShape;\n/*OOP herency*/\n\nFormShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n  if( this.action )\n    this.domElement.action = this.action;\n\n  if( this.method )\n    this.domElement.method = this.method;\n\n  if( this.encoding )\n    this.domElement.enctype = this.encoding;\n\n  if( !this.submitTrigger ){\n    throw 'You need a submit trigger for a form';\n  }\n\n\n  if(this.submitTrigger)\n    this.appendShape( this.submitTrigger );\n\n  for (var i = 0; i < this.childs.length; i++) {\n\n    if( !this.childs[i].domElement ){\n      this.childs[i].buildDom();\n    }\n\n    this.domElement.appendChild( this.childs[i].domElement );\n\n  }\n\n  //make submitTrigger button visible or invisible according to the flag setted at creation\n  if( !this.submitTrigger.visible )\n    this.submitTrigger.domElement.style.visibility = \"hidden\";\n\n  for( var ev in this.eventAndCallback ){\n    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n  }\n\n};\n\n\nFormShape.prototype.setAction = function(action){\n\n  if( action )\n    this.action = action;\n\n};\n\nFormShape.prototype.setMethod = function(method){\n\n  if( method )\n    this.method = method;\n\n};\n\nFormShape.prototype.setEncoding = function(encoding){\n\n  if( encoding )\n    this.encoding = encoding;\n\n};\n\nFormShape.prototype.addSection = function( childSection ){\n\n  if( childSection instanceof Shape ){\n\n    this.appendShape( childSection );\n    console.log( this.childs );\n\n  }else{\n    throw 'The argument should be a Shape object';\n  }\n\n};\n\nFormShape.prototype.setSubmitTrigger = function( text ){\n  //un trigger puede ser un boton, como puede ser un TECLA\n  if( typeof text !== 'string' )\n    throw 'Argument should be a string containing text of submit button, if no text submit will be not visible';\n\n  var st;\n  if ( text !== '' ) {\n    st = new ButtonShape( text );\n    //lets set a flag in this object to account for ti later on buildDom\n    st.visible = true;\n  }else{\n    st = new ButtonShape('');\n  }\n\n  this.submitTrigger = st;\n\n  return st;\n};\n\nFormShape.prototype.sendData = function( evt ){\n\n  evt.preventDefault();\n  //TODO: lib that structure requests for our framework :)\n\n\n};\n\nFormShape.prototype.serializeForm = function(){\n\n  this.serializeElement( this );\n  return this.data;\n\n};\n\nFormShape.prototype.serializeElement = function( theShape ){\n\n  for( var i = 0; i < theShape.childs.length; ++i ) {\n\n    var name;\n    var value;\n\n    var element = theShape.childs[i];\n\n    if( element instanceof TextInputShape ){\n      name = element.id;\n      value = element.getVal();\n\n    }else if ( element instanceof OptionShape ) {\n      name = element.id;\n      value = element.getSelectedOptions();\n    }else{\n      //continue;\n    }\n    if( name ) {\n       this.data[ name ] = value;\n    }\n\n    if( element.childs.length > 0 ){\n      this.serializeElement( element );\n    }\n\n  }\n\n};\n\nFormShape.prototype.render_ = function(){\n\n};\n\nmodule.exports = FormShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/FormShape.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}