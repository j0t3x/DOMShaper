{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///domshaper.min.js","webpack:///webpack/bootstrap c844dbd8d040b69158ef","webpack:///./src/index.js","webpack:///./src/shapes/Shape.js","webpack:///./src/shapes/ButtonShape.js","webpack:///./src/shapes/OptionShape.js","webpack:///./src/shapes/ImageShape.js","webpack:///./src/shapes/TextInputShape.js","webpack:///./src/shapes/TextShape.js","webpack:///./src/shapes/FormShape.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Shape","ButtonShape","OptionShape","ImageShape","TextInputShape","TextShape","FormShape","elem","domElement","childs","classes","parent","needsRender","attributes","eventAndCallback","console","error","elementName","nodeName","prototype","appendShape","shapeToAppend","push","childShape","buildDom","document","createElement","buildId","buildClasses","buildAttributes","buildEvents","buildChilds","className","attr","setAttribute","ev","addEventListener","i","length","appendChild","render","render_","on","event","callback","removeAllChilds","firstChild","removeChild","splice","removeShape","reference","setClass","arguments","setId","addAttr","name","value","buttonText","textContent","Object","create","contructor","innerHTML","updateText","text","type","groupName","structure","domElements","changedOptionsValues","addOption","displayText","classForName","classForInput","display","optionUnit","container","input","label","indicator","getSelectedOptions","res","checked","src","width","height","style","changeImage","setWHpx","w","h","getVal","setValue","method","encoding","submitTrigger","data","action","enctype","visible","visibility","setAction","setMethod","setEncoding","addSection","childSection","log","setSubmitTrigger","st","sendData","evt","preventDefault","serializeForm","serializeElement","theShape","element"],"mappings":"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","file":"domshaper.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"domshaper\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"domshaper\"] = factory();\n\telse\n\t\troot[\"domshaper\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"domshaper\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"domshaper\"] = factory();\n\telse\n\t\troot[\"domshaper\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\tvar ButtonShape = __webpack_require__(2);\n\tvar OptionShape = __webpack_require__(3);\n\tvar ImageShape = __webpack_require__(4);\n\tvar TextInputShape = __webpack_require__(5);\n\tvar TextShape = __webpack_require__(6);\n\tvar FormShape = __webpack_require__(7);\n\t\n\texports.Shape = Shape; \n\texports.ButtonShape = ButtonShape;\n\texports.OptionShape = OptionShape;\n\texports.ImageShape = ImageShape;\n\texports.TextInputShape = TextInputShape;\n\texports.TextShape = TextShape;\n\texports.FormShape = FormShape;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tvar Shape = function( elem, id ){\n\t\n\t  this.id = ( id )? id : null;\n\t  this.domElement;\n\t  this.childs = [];\n\t  this.classes = '';\n\t  this.parent;\n\t  this.needsRender = true;\n\t  this.attributes = {};\n\t\n\t  //fo the eventa\n\t  this.eventAndCallback = {};\n\t\n\t\n\t  if( !elem ){\n\t    console.error('Element should be a DOM node or a string literal');\n\t  }\n\t\n\t  if( typeof elem === 'string' ){\n\t    this.elementName = ( elem )? elem : null;\n\t  }\n\t\n\t  if( elem.nodeName ){\n\t    this.domElement = elem;\n\t  }\n\t\n\t};\n\t\n\tShape.prototype.appendShape = function( shapeToAppend ){\n\t\n\t  if( shapeToAppend instanceof Shape ){\n\t\n\t    //add the Shape object to the childs array\n\t    shapeToAppend.parent  = this;\n\t    this.childs.push( shapeToAppend );\n\t\n\t  }else if( typeof shapeToAppend === 'string' ){\n\t\n\t    var childShape = new Shape( shapeToAppend, null );\n\t    childShape.parent = this;\n\t    this.childs.push( childShape );\n\t\n\t  }else{\n\t    console.error('only shape or string as arguments, gtfo');\n\t    //we dont want to stop the main thread for this misuse\n\t  }\n\t\n\t};\n\t\n\tShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t    this.buildId();\n\t    this.buildClasses();\n\t    this.buildAttributes();\n\t    this.buildEvents();\n\t    this.buildChilds();\n\t\n\t};\n\t\n\tShape.prototype.buildId = function(){\n\t  if( this.id )\n\t    this.domElement.id = this.id;\n\t};\n\t\n\tShape.prototype.buildClasses = function(){\n\t  if( this.classes )\n\t    this.domElement.className += ' ' + this.classes;\n\t};\n\t\n\tShape.prototype.buildAttributes = function(){\n\t  for( var attr in this.attributes){\n\t    this.domElement.setAttribute(attr,this.attributes[attr]);\n\t  }\n\t};\n\t\n\tShape.prototype.buildEvents = function(){\n\t  for( var ev in this.eventAndCallback ){\n\t    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n\t  }\n\t};\n\t\n\tShape.prototype.buildChilds = function(){\n\t  for (var i = 0; i < this.childs.length; i++) {\n\t    if( !this.childs[i].domElement ){\n\t      this.childs[i].buildDom();\n\t    }\n\t    this.domElement.appendChild( this.childs[i].domElement );\n\t  }\n\t};\n\t\n\tShape.prototype.render = function(){\n\t\n\t  if( !this.needsRender ){\n\t    this.render_();\n\t  }\n\t\n\t  if( this.childs ){\n\t    for (var i = 0; i < this.childs.length; i++) {\n\t      //render all childs shit\n\t      this.childs[i].render();\n\t    }\n\t  }\n\t\n\t  this.needsRender = false;\n\t\n\t};\n\t\n\tShape.prototype.render_ = function(){\n\t\n\t};\n\t\n\t//event listener\n\t//choose your listener using a string\n\tShape.prototype.on = function( event, callback ){\n\t  //all listener here? maybe :)\n\t  if( typeof event !== 'string' ){\n\t    console.error('use string identifiers for events');\n\t  }\n\t\n\t  this.eventAndCallback[event] = callback;\n\t\n\t};\n\t\n\tShape.prototype.removeAllChilds = function(){\n\t\n\t  while (this.domElement.firstChild) {\n\t    this.domElement.removeChild(this.domElement.firstChild);\n\t  }\n\t\n\t  for (var i = this.childs.length - 1; i >= 0 ; i--) {\n\t    this.childs[i].parent = null;\n\t    this.childs.splice(i, 1);\n\t  }\n\t\n\t};\n\t\n\t\n\tShape.prototype.removeShape = function( childShape ){\n\t\n\t  var reference;\n\t  if( childShape instanceof Shape ){\n\t    //add the Shape object to the childs array\n\t    for (var i = this.childs.length - 1; i >= 0; i--) {\n\t      if( this.childs[i] === childShape){\n\t        reference = this.childs.splice( i, 1 )[0];\n\t        break;\n\t      }\n\t    }\n\t\n\t  }else{\n\t    console.error(': argument should be a Shape object');\n\t  }\n\t\n\t  //remove interface\n\t  if( reference )\n\t    this.domElement.removeChild( reference.domElement );\n\t\n\t  //return reference; this only make sense if the argument is a string literal referring a dom element name\n\t\n\t};\n\t\n\tShape.prototype.setClass = function(){\n\t\n\t  //you can set several classes like this 'clas1 class2 class3'\n\t\n\t  for ( var i = 0; i < arguments.length ; i++ ) {\n\t\n\t    if( typeof arguments[i] !== 'string' )\n\t      console.error(': className should be a string literal');\n\t\n\t    this.classes += ( ' ' + arguments[i] );\n\t  }\n\t  //this.classes = classes;\n\t\n\t};\n\t\n\tShape.prototype.setId = function( id ){\n\t\n\t  //you can set several classes like this 'clas1 class2 class3'\n\t  if( typeof id !== 'string' )\n\t    console.error(': id should be a string literal');\n\t\n\t  this.id = id;\n\t\n\t  if( this.id )\n\t    this.domElement.id = this.id;\n\t\n\t};\n\t\n\tShape.prototype.addAttr = function( name , value ){\n\t\n\t  //you can set several classes like this 'clas1 class2 class3'\n\t  if( typeof name !== 'string' )\n\t    console.error(': name should be a string literal');\n\t\n\t  if( !value || (typeof value !== 'string' && typeof value !== 'number') )\n\t    console.error(': value shouldnt be empty, use number or string');\n\t\n\t  this.attributes[name] = value;\n\t\n\t};\n\t\n\t\n\tmodule.exports = Shape;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\t\n\tvar ButtonShape = function( buttonText, id ){\n\t  Shape.call( this, 'button', id );\n\t  this.textContent = buttonText;\n\t};\n\t/*OOP herency*/\n\tButtonShape.prototype = Object.create( Shape.prototype );\n\tButtonShape.prototype.contructor = ButtonShape;\n\t/*OOP herency*/\n\t\n\tButtonShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t  this.buildId();\n\t  this.buildClasses();\n\t  this.buildAttributes();\n\t  this.buildEvents();\n\t  //this.buildChilds();\n\t\n\t  this.domElement.innerHTML = this.textContent;\n\t\n\t};\n\t\n\t//t is a string with the text for the ButtonShape\n\tButtonShape.prototype.updateText = function( text ){\n\t    if( typeof text !== 'string' )\n\t      console.error(': argument of updateText should be a string literal');\n\t\n\t    this.textContent = text;\n\t    this.needsRender = true;\n\t};\n\t\n\tButtonShape.prototype.render_ = function(){\n\t\n\t  if( this.textContent )\n\t    this.domElement.innerHTML = this.textContent;\n\t\n\t};\n\t\n\t\n\t\n\tmodule.exports = ButtonShape;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t//this is a bad example of  a shape, its poorly written. It builds an option group for bootstrap css, lame... i can do better\n\t// buuut, and this is a big but, it worked for what was intended so dont judge XD\n\tvar Shape = __webpack_require__(1);\n\t\n\tvar OptionShape = function( name, type ){\n\t\n\t  Shape.call( this, 'div', name );\n\t  if( typeof type !== 'string' )\n\t      console.error('indicate wether this is a radio or check group of options with a string');\n\t\n\t  this.type = '';\n\t  //setting input type, dom style\n\t  if( type === 'radio' )\n\t      this.type = 'radio';\n\t  else if( type === 'check' )\n\t      this.type = 'checkbox';\n\t\n\t  this.groupName = name;\n\t  this.structure = [];\n\t  this.domElements = [];\n\t  this.domElement;\n\t  this.changedOptionsValues = [];\n\t\n\t};\n\t/*OOP herency*/\n\tOptionShape.prototype = Object.create( Shape.prototype );\n\tOptionShape.prototype.contructor = OptionShape;\n\t/*OOP herency*/\n\t\n\tOptionShape.prototype.addOption = function( displayText, value, classForName, classForInput ){\n\t\n\t     if( !displayText || !value )\n\t          console.error('you should add an option with display and value arguments...');\n\t\n\t     this.structure.push({\n\t          display: displayText,\n\t          value: value,\n\t          classForName: ( classForName ) ? classForName : '',\n\t          classForInput: ( classForInput ) ? classForInput : ''\n\t     });\n\t\n\t};\n\t\n\tOptionShape.prototype.buildDom = function(){\n\t\n\t     this.domElement = document.createElement('div');\n\t\n\t     for (var i = 0; i < this.structure.length; i++ ) {\n\t\n\t          var optionUnit = {\n\t               container: document.createElement('div'),\n\t               input: null,\n\t               label: null,\n\t               name: null,\n\t               indicator: null\n\t          };\n\t\n\t          optionUnit.input = document.createElement('input');\n\t          optionUnit.input.type = this.type;\n\t          optionUnit.input.name = this.groupName;\n\t          optionUnit.input.value = this.structure[i].value;\n\t          optionUnit.input.className = this.structure[i].classForInput;\n\t          //optionUnit.container.appendChild( optionUnit.input );\n\t\n\t          optionUnit.label = document.createElement('label');\n\t          //optionUnit.label.innerHTML = this.structure[i].display;\n\t          optionUnit.label.className = this.structure[i].classForName;\n\t          optionUnit.label.appendChild( optionUnit.input );\n\t\n\t          optionUnit.name = document.createElement('span');\n\t          optionUnit.name.innerHTML = this.structure[i].display;\n\t          optionUnit.name.className = 'custom-control-description';\n\t          optionUnit.label.appendChild( optionUnit.name );\n\t\n\t          optionUnit.indicator = document.createElement('span');\n\t          optionUnit.indicator.className = 'custom-control-indicator';\n\t          optionUnit.label.appendChild( optionUnit.indicator );\n\t\n\t          optionUnit.container.appendChild( optionUnit.label );\n\t\n\t          optionUnit.container.className = 'form-check';\n\t\n\t          this.domElements.push( optionUnit );\n\t          //add the root dom element to attach to page\n\t          this.domElement.appendChild( optionUnit.container );\n\t\n\t     }\n\t\n\t     if( this.id )\n\t          this.domElement.id = this.id;\n\t\n\t     if( this.classes )\n\t          this.domElement.className += ' ' + this.classes;\n\t\n\t};\n\t\n\t//t is a string with the text for the OptionShape\n\tOptionShape.prototype.getSelectedOptions = function(){\n\t\n\t    var res = [];\n\t\n\t     for (var i = this.domElements.length; i--; ) {\n\t\n\t          if( this.domElements[i].input.checked )\n\t               res.push( this.domElements[i].input.value )\n\t\n\t     }\n\t\n\t     return res;\n\t};\n\t\n\tOptionShape.prototype.render_ = function(){\n\t\n\t     //no render need, yet\n\t\n\t};\n\t\n\t\n\tmodule.exports = OptionShape;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\t\n\tvar ImageShape = function( src, id ){\n\t  Shape.call( this, 'img', id );\n\t\n\t  if( typeof src !== 'string' )\n\t    console.error(': image src should be a string literal');\n\t\n\t  if( src ){\n\t    this.src = src;\n\t  }else{\n\t    console.error(': 3rd input shouldnt be null');\n\t  }\n\t\n\t  this.width;\n\t  this.height;\n\t\n\t};\n\t/*OOP herency*/\n\tImageShape.prototype = Object.create( Shape.prototype );\n\tImageShape.prototype.contructor = ImageShape;\n\t/*OOP herency*/\n\t\n\tImageShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t  this.domElement.src = this.src;\n\t\n\t  this.buildId();\n\t  this.buildClasses();\n\t  this.buildAttributes();\n\t  this.buildEvents();\n\t  //this.buildChilds();\n\t\n\t  if( this.width )\n\t    this.domElement.width = this.width;\n\t\n\t  if( this.height )\n\t    this.domElement.height = this.height;\n\t\n\t};\n\t\n\tImageShape.prototype.render_ = function(){\n\t\n\t  this.domElement.src = this.src;\n\t\n\t  if( this.width )\n\t    this.domElement.style.width = this.width + 'px';\n\t\n\t  if( this.height )\n\t    this.domElement.style.height = this.height + 'px';\n\t\n\t};\n\t\n\tImageShape.prototype.changeImage = function( src ){\n\t\n\t  if( typeof src !== 'string' )\n\t    console.error(': image src should be a string literal');\n\t\n\t  this.src = src;\n\t  this.needsRender = true;\n\t};\n\t\n\tImageShape.prototype.setWHpx = function( w, h ){\n\t\n\t  if( w && typeof w === 'number' ){\n\t    this.width = w;\n\t  }\n\t\n\t  if( h && typeof h === 'number' ){\n\t    this.height = h;\n\t  }\n\t\n\t  this.needsRender = true;\n\t\n\t};\n\t\n\tmodule.exports = ImageShape;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\t\n\tvar TextInputShape = function( id ){\n\t  Shape.call( this, 'input', id );\n\t  this.textContent = '';\n\t  this.name = '';\n\t};\n\t/*OOP herency*/\n\tTextInputShape.prototype = Object.create( Shape.prototype );\n\tTextInputShape.prototype.contructor = TextInputShape;\n\t/*OOP herency*/\n\t\n\tTextInputShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t  this.domElement.type = 'text';\n\t  this.domElement.value = this.textContent;\n\t\n\t  this.buildId();\n\t  this.buildClasses();\n\t  this.buildAttributes();\n\t  this.buildEvents();\n\t  //this.buildChilds();\n\t\n\t};\n\t\n\t//t is a string with the text for the TextInputShape\n\tTextInputShape.prototype.getVal = function(){\n\t    if( !this.domElement )\n\t      console.error(': first build object DOM ->  buildDom()');\n\t\n\t    return this.domElement.value;\n\t};\n\t\n\t\n\tTextInputShape.prototype.setValue = function( value ){\n\t    if( typeof value !== 'string' )\n\t      console.error(': argument of updateText should be a string literal');\n\t\n\t    this.textContent = value;\n\t    this.needsRender = true;\n\t};\n\t\n\tTextInputShape.prototype.render_ = function(){\n\t\n\t  if( this.textContent )\n\t    this.domElement.value = this.textContent;\n\t\n\t};\n\t\n\tmodule.exports = TextInputShape;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\tvar TextShape = function(elem, id) {\n\t    Shape.call(this, elem, id);\n\t    this.textContent = '';\n\t};\n\t/*OOP herency*/\n\tTextShape.prototype = Object.create(Shape.prototype);\n\tTextShape.prototype.contructor = TextShape;\n\t/*OOP herency*/\n\tTextShape.prototype.buildDom = function() {\n\t    if (this.elementName && !this.domElement)\n\t      this.domElement = document.createElement(this.elementName);\n\t\n\t    this.domElement.innerHTML = this.textContent;\n\t\n\t    this.buildId();\n\t    this.buildClasses();\n\t    this.buildAttributes();\n\t    this.buildEvents();\n\t    this.buildChilds();\n\t\n\t};\n\t\n\tTextShape.prototype.updateText = function(textContent, method) {\n\t    this.needsRender = true;\n\t    if( !method )\n\t      method = \"replace\";\n\t\n\t    if (typeof textContent !== 'string') {\n\t        console.error(': first argument of updateText should be a string literal');\n\t    }\n\t    switch (method) {\n\t        case \"replace\":\n\t            this.textContent = textContent;\n\t            break;\n\t        case \"append\":\n\t            this.textContent = this.textContent + textContent;\n\t            break;\n\t        case \"prepend\":\n\t            this.textContent = textContent + this.textContent;\n\t            break;\n\t        default:\n\t            console.error(': method of updateText invalid, valid methods : [default] \"replace\",\"append\",\"prepend\"');\n\t    }\n\t};\n\tTextShape.prototype.render_ = function() {\n\t    if (this.textContent) this.domElement.innerHTML = this.textContent;\n\t};\n\tmodule.exports = TextShape;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\tvar TextInputShape = __webpack_require__(5);\n\tvar ButtonShape = __webpack_require__(2);\n\tvar OptionShape = __webpack_require__(3);\n\t\n\tvar FormShape = function( id ){\n\t  Shape.call( this, 'form', id );\n\t\n\t  //this.action = action;\n\t  this.method = '';\n\t  this.encoding = '';\n\t  this.submitTrigger;\n\t  this.data = {}; //remember this could be a file\n\t\n\t};\n\t/*OOP herency*/\n\tFormShape.prototype = Object.create( Shape.prototype );\n\tFormShape.prototype.contructor = FormShape;\n\t/*OOP herency*/\n\t\n\tFormShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t  this.buildId();\n\t  this.buildClasses();\n\t\n\t  if( this.action )\n\t    this.domElement.action = this.action;\n\t\n\t  if( this.method )\n\t    this.domElement.method = this.method;\n\t\n\t  if( this.encoding )\n\t    this.domElement.enctype = this.encoding;\n\t\n\t  if( !this.submitTrigger ){\n\t    console.error('You need a submit trigger for a form');\n\t  }\n\t\n\t  if(this.submitTrigger)\n\t    this.appendShape( this.submitTrigger );\n\t\n\t  this.buildChilds();\n\t\n\t  //make submitTrigger button visible or invisible according to the flag setted at creation\n\t  if( !this.submitTrigger.visible )\n\t    this.submitTrigger.domElement.style.visibility = \"hidden\";\n\t\n\t  this.buildAttributes();\n\t  this.buildEvents();\n\t  \n\t};\n\t\n\t\n\tFormShape.prototype.setAction = function(action){\n\t\n\t  if( action )\n\t    this.action = action;\n\t\n\t};\n\t\n\tFormShape.prototype.setMethod = function(method){\n\t\n\t  if( method )\n\t    this.method = method;\n\t\n\t};\n\t\n\tFormShape.prototype.setEncoding = function(encoding){\n\t\n\t  if( encoding )\n\t    this.encoding = encoding;\n\t\n\t};\n\t\n\tFormShape.prototype.addSection = function( childSection ){\n\t\n\t  if( childSection instanceof Shape ){\n\t\n\t    this.appendShape( childSection );\n\t    console.log( this.childs );\n\t\n\t  }else{\n\t    console.error('The argument should be a Shape object');\n\t  }\n\t\n\t};\n\t\n\tFormShape.prototype.setSubmitTrigger = function( text ){\n\t  //un trigger puede ser un boton, como puede ser un TECLA\n\t  if( typeof text !== 'string' )\n\t    console.error('Argument should be a string containing text of submit button, if no text submit will be not visible');\n\t\n\t  var st;\n\t  if ( text !== '' ) {\n\t    st = new ButtonShape( text );\n\t    //lets set a flag in this object to account for ti later on buildDom\n\t    st.visible = true;\n\t  }else{\n\t    st = new ButtonShape('');\n\t  }\n\t\n\t  this.submitTrigger = st;\n\t\n\t  return st;\n\t};\n\t\n\tFormShape.prototype.sendData = function( evt ){\n\t\n\t  evt.preventDefault();\n\t  //TODO: lib that structure requests for our framework :)\n\t\n\t\n\t};\n\t\n\tFormShape.prototype.serializeForm = function(){\n\t\n\t  this.serializeElement( this );\n\t  return this.data;\n\t\n\t};\n\t\n\tFormShape.prototype.serializeElement = function( theShape ){\n\t\n\t  for( var i = 0; i < theShape.childs.length; ++i ) {\n\t\n\t    var name;\n\t    var value;\n\t\n\t    var element = theShape.childs[i];\n\t\n\t    if( element instanceof TextInputShape ){\n\t      name = element.id;\n\t      value = element.getVal();\n\t\n\t    }else if ( element instanceof OptionShape ) {\n\t      name = element.id;\n\t      value = element.getSelectedOptions();\n\t    }else{\n\t      //continue;\n\t    }\n\t    if( name ) {\n\t       this.data[ name ] = value;\n\t    }\n\t\n\t    if( element.childs.length > 0 ){\n\t      this.serializeElement( element );\n\t    }\n\t\n\t  }\n\t\n\t};\n\t\n\tFormShape.prototype.render_ = function(){\n\t\n\t};\n\t\n\tmodule.exports = FormShape;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// domshaper.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c844dbd8d040b69158ef","var Shape = require('./shapes/Shape.js');\nvar ButtonShape = require('./shapes/ButtonShape.js');\nvar OptionShape = require('./shapes/OptionShape.js');\nvar ImageShape = require('./shapes/ImageShape.js');\nvar TextInputShape = require('./shapes/TextInputShape.js');\nvar TextShape = require('./shapes/TextShape.js');\nvar FormShape = require('./shapes/FormShape.js');\n\nexports.Shape = Shape; \nexports.ButtonShape = ButtonShape;\nexports.OptionShape = OptionShape;\nexports.ImageShape = ImageShape;\nexports.TextInputShape = TextInputShape;\nexports.TextShape = TextShape;\nexports.FormShape = FormShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0","var Shape = function( elem, id ){\n\n  this.id = ( id )? id : null;\n  this.domElement;\n  this.childs = [];\n  this.classes = '';\n  this.parent;\n  this.needsRender = true;\n  this.attributes = {};\n\n  //fo the eventa\n  this.eventAndCallback = {};\n\n\n  if( !elem ){\n    console.error('Element should be a DOM node or a string literal');\n  }\n\n  if( typeof elem === 'string' ){\n    this.elementName = ( elem )? elem : null;\n  }\n\n  if( elem.nodeName ){\n    this.domElement = elem;\n  }\n\n};\n\nShape.prototype.appendShape = function( shapeToAppend ){\n\n  if( shapeToAppend instanceof Shape ){\n\n    //add the Shape object to the childs array\n    shapeToAppend.parent  = this;\n    this.childs.push( shapeToAppend );\n\n  }else if( typeof shapeToAppend === 'string' ){\n\n    var childShape = new Shape( shapeToAppend, null );\n    childShape.parent = this;\n    this.childs.push( childShape );\n\n  }else{\n    console.error('only shape or string as arguments, gtfo');\n    //we dont want to stop the main thread for this misuse\n  }\n\n};\n\nShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n    this.buildId();\n    this.buildClasses();\n    this.buildAttributes();\n    this.buildEvents();\n    this.buildChilds();\n\n};\n\nShape.prototype.buildId = function(){\n  if( this.id )\n    this.domElement.id = this.id;\n};\n\nShape.prototype.buildClasses = function(){\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n};\n\nShape.prototype.buildAttributes = function(){\n  for( var attr in this.attributes){\n    this.domElement.setAttribute(attr,this.attributes[attr]);\n  }\n};\n\nShape.prototype.buildEvents = function(){\n  for( var ev in this.eventAndCallback ){\n    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n  }\n};\n\nShape.prototype.buildChilds = function(){\n  for (var i = 0; i < this.childs.length; i++) {\n    if( !this.childs[i].domElement ){\n      this.childs[i].buildDom();\n    }\n    this.domElement.appendChild( this.childs[i].domElement );\n  }\n};\n\nShape.prototype.render = function(){\n\n  if( !this.needsRender ){\n    this.render_();\n  }\n\n  if( this.childs ){\n    for (var i = 0; i < this.childs.length; i++) {\n      //render all childs shit\n      this.childs[i].render();\n    }\n  }\n\n  this.needsRender = false;\n\n};\n\nShape.prototype.render_ = function(){\n\n};\n\n//event listener\n//choose your listener using a string\nShape.prototype.on = function( event, callback ){\n  //all listener here? maybe :)\n  if( typeof event !== 'string' ){\n    console.error('use string identifiers for events');\n  }\n\n  this.eventAndCallback[event] = callback;\n\n};\n\nShape.prototype.removeAllChilds = function(){\n\n  while (this.domElement.firstChild) {\n    this.domElement.removeChild(this.domElement.firstChild);\n  }\n\n  for (var i = this.childs.length - 1; i >= 0 ; i--) {\n    this.childs[i].parent = null;\n    this.childs.splice(i, 1);\n  }\n\n};\n\n\nShape.prototype.removeShape = function( childShape ){\n\n  var reference;\n  if( childShape instanceof Shape ){\n    //add the Shape object to the childs array\n    for (var i = this.childs.length - 1; i >= 0; i--) {\n      if( this.childs[i] === childShape){\n        reference = this.childs.splice( i, 1 )[0];\n        break;\n      }\n    }\n\n  }else{\n    console.error(': argument should be a Shape object');\n  }\n\n  //remove interface\n  if( reference )\n    this.domElement.removeChild( reference.domElement );\n\n  //return reference; this only make sense if the argument is a string literal referring a dom element name\n\n};\n\nShape.prototype.setClass = function(){\n\n  //you can set several classes like this 'clas1 class2 class3'\n\n  for ( var i = 0; i < arguments.length ; i++ ) {\n\n    if( typeof arguments[i] !== 'string' )\n      console.error(': className should be a string literal');\n\n    this.classes += ( ' ' + arguments[i] );\n  }\n  //this.classes = classes;\n\n};\n\nShape.prototype.setId = function( id ){\n\n  //you can set several classes like this 'clas1 class2 class3'\n  if( typeof id !== 'string' )\n    console.error(': id should be a string literal');\n\n  this.id = id;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n};\n\nShape.prototype.addAttr = function( name , value ){\n\n  //you can set several classes like this 'clas1 class2 class3'\n  if( typeof name !== 'string' )\n    console.error(': name should be a string literal');\n\n  if( !value || (typeof value !== 'string' && typeof value !== 'number') )\n    console.error(': value shouldnt be empty, use number or string');\n\n  this.attributes[name] = value;\n\n};\n\n\nmodule.exports = Shape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/Shape.js\n// module id = 1\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar ButtonShape = function( buttonText, id ){\n  Shape.call( this, 'button', id );\n  this.textContent = buttonText;\n};\n/*OOP herency*/\nButtonShape.prototype = Object.create( Shape.prototype );\nButtonShape.prototype.contructor = ButtonShape;\n/*OOP herency*/\n\nButtonShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.buildId();\n  this.buildClasses();\n  this.buildAttributes();\n  this.buildEvents();\n  //this.buildChilds();\n\n  this.domElement.innerHTML = this.textContent;\n\n};\n\n//t is a string with the text for the ButtonShape\nButtonShape.prototype.updateText = function( text ){\n    if( typeof text !== 'string' )\n      console.error(': argument of updateText should be a string literal');\n\n    this.textContent = text;\n    this.needsRender = true;\n};\n\nButtonShape.prototype.render_ = function(){\n\n  if( this.textContent )\n    this.domElement.innerHTML = this.textContent;\n\n};\n\n\n\nmodule.exports = ButtonShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/ButtonShape.js\n// module id = 2\n// module chunks = 0","//this is a bad example of  a shape, its poorly written. It builds an option group for bootstrap css, lame... i can do better\n// buuut, and this is a big but, it worked for what was intended so dont judge XD\nvar Shape = require('./Shape.js');\n\nvar OptionShape = function( name, type ){\n\n  Shape.call( this, 'div', name );\n  if( typeof type !== 'string' )\n      console.error('indicate wether this is a radio or check group of options with a string');\n\n  this.type = '';\n  //setting input type, dom style\n  if( type === 'radio' )\n      this.type = 'radio';\n  else if( type === 'check' )\n      this.type = 'checkbox';\n\n  this.groupName = name;\n  this.structure = [];\n  this.domElements = [];\n  this.domElement;\n  this.changedOptionsValues = [];\n\n};\n/*OOP herency*/\nOptionShape.prototype = Object.create( Shape.prototype );\nOptionShape.prototype.contructor = OptionShape;\n/*OOP herency*/\n\nOptionShape.prototype.addOption = function( displayText, value, classForName, classForInput ){\n\n     if( !displayText || !value )\n          console.error('you should add an option with display and value arguments...');\n\n     this.structure.push({\n          display: displayText,\n          value: value,\n          classForName: ( classForName ) ? classForName : '',\n          classForInput: ( classForInput ) ? classForInput : ''\n     });\n\n};\n\nOptionShape.prototype.buildDom = function(){\n\n     this.domElement = document.createElement('div');\n\n     for (var i = 0; i < this.structure.length; i++ ) {\n\n          var optionUnit = {\n               container: document.createElement('div'),\n               input: null,\n               label: null,\n               name: null,\n               indicator: null\n          };\n\n          optionUnit.input = document.createElement('input');\n          optionUnit.input.type = this.type;\n          optionUnit.input.name = this.groupName;\n          optionUnit.input.value = this.structure[i].value;\n          optionUnit.input.className = this.structure[i].classForInput;\n          //optionUnit.container.appendChild( optionUnit.input );\n\n          optionUnit.label = document.createElement('label');\n          //optionUnit.label.innerHTML = this.structure[i].display;\n          optionUnit.label.className = this.structure[i].classForName;\n          optionUnit.label.appendChild( optionUnit.input );\n\n          optionUnit.name = document.createElement('span');\n          optionUnit.name.innerHTML = this.structure[i].display;\n          optionUnit.name.className = 'custom-control-description';\n          optionUnit.label.appendChild( optionUnit.name );\n\n          optionUnit.indicator = document.createElement('span');\n          optionUnit.indicator.className = 'custom-control-indicator';\n          optionUnit.label.appendChild( optionUnit.indicator );\n\n          optionUnit.container.appendChild( optionUnit.label );\n\n          optionUnit.container.className = 'form-check';\n\n          this.domElements.push( optionUnit );\n          //add the root dom element to attach to page\n          this.domElement.appendChild( optionUnit.container );\n\n     }\n\n     if( this.id )\n          this.domElement.id = this.id;\n\n     if( this.classes )\n          this.domElement.className += ' ' + this.classes;\n\n};\n\n//t is a string with the text for the OptionShape\nOptionShape.prototype.getSelectedOptions = function(){\n\n    var res = [];\n\n     for (var i = this.domElements.length; i--; ) {\n\n          if( this.domElements[i].input.checked )\n               res.push( this.domElements[i].input.value )\n\n     }\n\n     return res;\n};\n\nOptionShape.prototype.render_ = function(){\n\n     //no render need, yet\n\n};\n\n\nmodule.exports = OptionShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/OptionShape.js\n// module id = 3\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar ImageShape = function( src, id ){\n  Shape.call( this, 'img', id );\n\n  if( typeof src !== 'string' )\n    console.error(': image src should be a string literal');\n\n  if( src ){\n    this.src = src;\n  }else{\n    console.error(': 3rd input shouldnt be null');\n  }\n\n  this.width;\n  this.height;\n\n};\n/*OOP herency*/\nImageShape.prototype = Object.create( Shape.prototype );\nImageShape.prototype.contructor = ImageShape;\n/*OOP herency*/\n\nImageShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.domElement.src = this.src;\n\n  this.buildId();\n  this.buildClasses();\n  this.buildAttributes();\n  this.buildEvents();\n  //this.buildChilds();\n\n  if( this.width )\n    this.domElement.width = this.width;\n\n  if( this.height )\n    this.domElement.height = this.height;\n\n};\n\nImageShape.prototype.render_ = function(){\n\n  this.domElement.src = this.src;\n\n  if( this.width )\n    this.domElement.style.width = this.width + 'px';\n\n  if( this.height )\n    this.domElement.style.height = this.height + 'px';\n\n};\n\nImageShape.prototype.changeImage = function( src ){\n\n  if( typeof src !== 'string' )\n    console.error(': image src should be a string literal');\n\n  this.src = src;\n  this.needsRender = true;\n};\n\nImageShape.prototype.setWHpx = function( w, h ){\n\n  if( w && typeof w === 'number' ){\n    this.width = w;\n  }\n\n  if( h && typeof h === 'number' ){\n    this.height = h;\n  }\n\n  this.needsRender = true;\n\n};\n\nmodule.exports = ImageShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/ImageShape.js\n// module id = 4\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar TextInputShape = function( id ){\n  Shape.call( this, 'input', id );\n  this.textContent = '';\n  this.name = '';\n};\n/*OOP herency*/\nTextInputShape.prototype = Object.create( Shape.prototype );\nTextInputShape.prototype.contructor = TextInputShape;\n/*OOP herency*/\n\nTextInputShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.domElement.type = 'text';\n  this.domElement.value = this.textContent;\n\n  this.buildId();\n  this.buildClasses();\n  this.buildAttributes();\n  this.buildEvents();\n  //this.buildChilds();\n\n};\n\n//t is a string with the text for the TextInputShape\nTextInputShape.prototype.getVal = function(){\n    if( !this.domElement )\n      console.error(': first build object DOM ->  buildDom()');\n\n    return this.domElement.value;\n};\n\n\nTextInputShape.prototype.setValue = function( value ){\n    if( typeof value !== 'string' )\n      console.error(': argument of updateText should be a string literal');\n\n    this.textContent = value;\n    this.needsRender = true;\n};\n\nTextInputShape.prototype.render_ = function(){\n\n  if( this.textContent )\n    this.domElement.value = this.textContent;\n\n};\n\nmodule.exports = TextInputShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/TextInputShape.js\n// module id = 5\n// module chunks = 0","var Shape = require('./Shape.js');\nvar TextShape = function(elem, id) {\n    Shape.call(this, elem, id);\n    this.textContent = '';\n};\n/*OOP herency*/\nTextShape.prototype = Object.create(Shape.prototype);\nTextShape.prototype.contructor = TextShape;\n/*OOP herency*/\nTextShape.prototype.buildDom = function() {\n    if (this.elementName && !this.domElement)\n      this.domElement = document.createElement(this.elementName);\n\n    this.domElement.innerHTML = this.textContent;\n\n    this.buildId();\n    this.buildClasses();\n    this.buildAttributes();\n    this.buildEvents();\n    this.buildChilds();\n\n};\n\nTextShape.prototype.updateText = function(textContent, method) {\n    this.needsRender = true;\n    if( !method )\n      method = \"replace\";\n\n    if (typeof textContent !== 'string') {\n        console.error(': first argument of updateText should be a string literal');\n    }\n    switch (method) {\n        case \"replace\":\n            this.textContent = textContent;\n            break;\n        case \"append\":\n            this.textContent = this.textContent + textContent;\n            break;\n        case \"prepend\":\n            this.textContent = textContent + this.textContent;\n            break;\n        default:\n            console.error(': method of updateText invalid, valid methods : [default] \"replace\",\"append\",\"prepend\"');\n    }\n};\nTextShape.prototype.render_ = function() {\n    if (this.textContent) this.domElement.innerHTML = this.textContent;\n};\nmodule.exports = TextShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/TextShape.js\n// module id = 6\n// module chunks = 0","var Shape = require('./Shape.js');\nvar TextInputShape = require('./TextInputShape.js');\nvar ButtonShape = require('./ButtonShape.js');\nvar OptionShape = require('./OptionShape.js');\n\nvar FormShape = function( id ){\n  Shape.call( this, 'form', id );\n\n  //this.action = action;\n  this.method = '';\n  this.encoding = '';\n  this.submitTrigger;\n  this.data = {}; //remember this could be a file\n\n};\n/*OOP herency*/\nFormShape.prototype = Object.create( Shape.prototype );\nFormShape.prototype.contructor = FormShape;\n/*OOP herency*/\n\nFormShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.buildId();\n  this.buildClasses();\n\n  if( this.action )\n    this.domElement.action = this.action;\n\n  if( this.method )\n    this.domElement.method = this.method;\n\n  if( this.encoding )\n    this.domElement.enctype = this.encoding;\n\n  if( !this.submitTrigger ){\n    console.error('You need a submit trigger for a form');\n  }\n\n  if(this.submitTrigger)\n    this.appendShape( this.submitTrigger );\n\n  this.buildChilds();\n\n  //make submitTrigger button visible or invisible according to the flag setted at creation\n  if( !this.submitTrigger.visible )\n    this.submitTrigger.domElement.style.visibility = \"hidden\";\n\n  this.buildAttributes();\n  this.buildEvents();\n  \n};\n\n\nFormShape.prototype.setAction = function(action){\n\n  if( action )\n    this.action = action;\n\n};\n\nFormShape.prototype.setMethod = function(method){\n\n  if( method )\n    this.method = method;\n\n};\n\nFormShape.prototype.setEncoding = function(encoding){\n\n  if( encoding )\n    this.encoding = encoding;\n\n};\n\nFormShape.prototype.addSection = function( childSection ){\n\n  if( childSection instanceof Shape ){\n\n    this.appendShape( childSection );\n    console.log( this.childs );\n\n  }else{\n    console.error('The argument should be a Shape object');\n  }\n\n};\n\nFormShape.prototype.setSubmitTrigger = function( text ){\n  //un trigger puede ser un boton, como puede ser un TECLA\n  if( typeof text !== 'string' )\n    console.error('Argument should be a string containing text of submit button, if no text submit will be not visible');\n\n  var st;\n  if ( text !== '' ) {\n    st = new ButtonShape( text );\n    //lets set a flag in this object to account for ti later on buildDom\n    st.visible = true;\n  }else{\n    st = new ButtonShape('');\n  }\n\n  this.submitTrigger = st;\n\n  return st;\n};\n\nFormShape.prototype.sendData = function( evt ){\n\n  evt.preventDefault();\n  //TODO: lib that structure requests for our framework :)\n\n\n};\n\nFormShape.prototype.serializeForm = function(){\n\n  this.serializeElement( this );\n  return this.data;\n\n};\n\nFormShape.prototype.serializeElement = function( theShape ){\n\n  for( var i = 0; i < theShape.childs.length; ++i ) {\n\n    var name;\n    var value;\n\n    var element = theShape.childs[i];\n\n    if( element instanceof TextInputShape ){\n      name = element.id;\n      value = element.getVal();\n\n    }else if ( element instanceof OptionShape ) {\n      name = element.id;\n      value = element.getSelectedOptions();\n    }else{\n      //continue;\n    }\n    if( name ) {\n       this.data[ name ] = value;\n    }\n\n    if( element.childs.length > 0 ){\n      this.serializeElement( element );\n    }\n\n  }\n\n};\n\nFormShape.prototype.render_ = function(){\n\n};\n\nmodule.exports = FormShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/FormShape.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}