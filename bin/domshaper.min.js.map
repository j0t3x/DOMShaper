{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///domshaper.min.js","webpack:///webpack/bootstrap 3d8107c62356b98f0e00","webpack:///./src/index.js","webpack:///./src/shapes/Shape.js","webpack:///./src/shapes/ButtonShape.js","webpack:///./src/shapes/OptionShape.js","webpack:///./src/shapes/ImageShape.js","webpack:///./src/shapes/TextInputShape.js","webpack:///./src/shapes/TextShape.js","webpack:///./src/shapes/FormShape.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Shape","ButtonShape","OptionShape","ImageShape","TextInputShape","TextShape","FormShape","elem","domElement","childs","classes","parent","needsRender","attributes","eventAndCallback","console","error","elementName","nodeName","prototype","appendShape","shapeToAppend","push","childShape","buildDom","document","createElement","className","attr","setAttribute","i","length","appendChild","ev","addEventListener","render","render_","on","event","callback","removeAllChilds","firstChild","removeChild","splice","removeShape","reference","setClass","arguments","setId","addAttr","name","value","buttonText","textContent","Object","create","contructor","innerHTML","updateText","text","type","groupName","structure","domElements","changedOptionsValues","addOption","displayText","classForName","classForInput","display","optionUnit","container","input","label","indicator","getSelectedOptions","res","checked","src","width","height","style","changeImage","setWHpx","w","h","getVal","setValue","setName","needsReRender","method","encoding","submitTrigger","data","action","enctype","visible","visibility","setAction","setMethod","setEncoding","addSection","childSection","log","setSubmitTrigger","st","sendData","evt","preventDefault","serializeForm","serializeElement","theShape","element"],"mappings":"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","file":"domshaper.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"domshaper\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"domshaper\"] = factory();\n\telse\n\t\troot[\"domshaper\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"domshaper\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"domshaper\"] = factory();\n\telse\n\t\troot[\"domshaper\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\tvar ButtonShape = __webpack_require__(2);\n\tvar OptionShape = __webpack_require__(3);\n\tvar ImageShape = __webpack_require__(4);\n\tvar TextInputShape = __webpack_require__(5);\n\tvar TextShape = __webpack_require__(6);\n\tvar FormShape = __webpack_require__(7);\n\t\n\texports.Shape = Shape; \n\texports.ButtonShape = ButtonShape;\n\texports.OptionShape = OptionShape;\n\texports.ImageShape = ImageShape;\n\texports.TextInputShape = TextInputShape;\n\texports.TextShape = TextShape;\n\texports.FormShape = FormShape;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tvar Shape = function( elem, id ){\n\t\n\t  this.id = ( id )? id : null;\n\t  this.domElement;\n\t  this.childs = [];\n\t  this.classes = '';\n\t  this.parent;\n\t  this.needsRender = true;\n\t  this.attributes = {};\n\t\n\t  //fo the eventa\n\t  this.eventAndCallback = {};\n\t\n\t\n\t  if( !elem ){\n\t    console.error('Element should be a DOM node or a string literal');\n\t  }\n\t\n\t  if( typeof elem === 'string' ){\n\t    this.elementName = ( elem )? elem : null;\n\t  }\n\t\n\t  if( elem.nodeName ){\n\t    this.domElement = elem;\n\t  }\n\t\n\t};\n\t\n\tShape.prototype.appendShape = function( shapeToAppend ){\n\t\n\t  if( shapeToAppend instanceof Shape ){\n\t\n\t    //add the Shape object to the childs array\n\t    shapeToAppend.parent  = this;\n\t    this.childs.push( shapeToAppend );\n\t\n\t  }else if( typeof shapeToAppend === 'string' ){\n\t\n\t    var childShape = new Shape( shapeToAppend, null );\n\t    childShape.parent = this;\n\t    this.childs.push( childShape );\n\t\n\t  }else{\n\t    console.error('only shape or string as arguments, gtfo');\n\t    //we dont want to stop the main thread for this misuse\n\t  }\n\t\n\t};\n\t\n\tShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t  if( this.id )\n\t    this.domElement.id = this.id;\n\t\n\t  if( this.classes )\n\t    this.domElement.className += ' ' + this.classes;\n\t\n\t  for( var attr in this.attributes){\n\t    this.domElement.setAttribute(attr,this.attributes[attr]);\n\t  }\n\t\n\t  for (var i = 0; i < this.childs.length; i++) {\n\t\n\t    if( !this.childs[i].domElement ){\n\t      this.childs[i].buildDom();\n\t    }\n\t\n\t\n\t    this.domElement.appendChild( this.childs[i].domElement );\n\t\n\t  }\n\t\n\t  for( var ev in this.eventAndCallback ){\n\t\n\t    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n\t\n\t  }\n\t\n\t\n\t};\n\t\n\tShape.prototype.render = function(){\n\t\n\t  if( !this.needsRender ){\n\t    this.render_();\n\t  }\n\t\n\t  if( this.childs ){\n\t    for (var i = 0; i < this.childs.length; i++) {\n\t      //render all childs shit\n\t      this.childs[i].render();\n\t    }\n\t  }\n\t\n\t  this.needsRender = false;\n\t\n\t};\n\t\n\tShape.prototype.render_ = function(){\n\t\n\t};\n\t\n\t//event listener\n\t//choose your listener using a string\n\tShape.prototype.on = function( event, callback ){\n\t  //all listener here? maybe :)\n\t  if( typeof event !== 'string' ){\n\t    console.error('use string identifiers for events');\n\t  }\n\t\n\t  this.eventAndCallback[event] = callback;\n\t\n\t};\n\t\n\tShape.prototype.removeAllChilds = function(){\n\t\n\t  while (this.domElement.firstChild) {\n\t    this.domElement.removeChild(this.domElement.firstChild);\n\t  }\n\t\n\t  for (var i = this.childs.length - 1; i >= 0 ; i--) {\n\t    this.childs[i].parent = null;\n\t    this.childs.splice(i, 1);\n\t  }\n\t\n\t};\n\t\n\t\n\tShape.prototype.removeShape = function( childShape ){\n\t\n\t  var reference;\n\t  if( childShape instanceof Shape ){\n\t    //add the Shape object to the childs array\n\t    for (var i = this.childs.length - 1; i >= 0; i--) {\n\t      if( this.childs[i] === childShape){\n\t        reference = this.childs.splice( i, 1 )[0];\n\t        break;\n\t      }\n\t    }\n\t\n\t  }else{\n\t    console.error(': argument should be a Shape object');\n\t  }\n\t\n\t  //remove interface\n\t  if( reference )\n\t    this.domElement.removeChild( reference.domElement );\n\t\n\t  //return reference; this only make sense if the argument is a string literal referring a dom element name\n\t\n\t};\n\t\n\tShape.prototype.setClass = function(){\n\t\n\t  //you can set several classes like this 'clas1 class2 class3'\n\t\n\t  for ( var i = 0; i < arguments.length ; i++ ) {\n\t\n\t    if( typeof arguments[i] !== 'string' )\n\t      console.error(': className should be a string literal');\n\t\n\t    this.classes += ( ' ' + arguments[i] );\n\t  }\n\t  //this.classes = classes;\n\t\n\t};\n\t\n\tShape.prototype.setId = function( id ){\n\t\n\t  //you can set several classes like this 'clas1 class2 class3'\n\t  if( typeof id !== 'string' )\n\t    console.error(': id should be a string literal');\n\t\n\t  this.id = id;\n\t\n\t  if( this.id )\n\t    this.domElement.id = this.id;\n\t\n\t};\n\t\n\tShape.prototype.addAttr = function( name , value ){\n\t\n\t  //you can set several classes like this 'clas1 class2 class3'\n\t  if( typeof name !== 'string' )\n\t    console.error(': name should be a string literal');\n\t\n\t  if( !value || (typeof value !== 'string' && typeof value !== 'number') )\n\t    console.error(': value shouldnt be empty, use number or string');\n\t\n\t  this.attributes[name] = value;\n\t\n\t};\n\t\n\t\n\tmodule.exports = Shape;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\t\n\tvar ButtonShape = function( buttonText, id ){\n\t  Shape.call( this, 'button', id );\n\t  this.textContent = buttonText;\n\t};\n\t/*OOP herency*/\n\tButtonShape.prototype = Object.create( Shape.prototype );\n\tButtonShape.prototype.contructor = ButtonShape;\n\t/*OOP herency*/\n\t\n\tButtonShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t  this.domElement.innerHTML = this.textContent;\n\t\n\t  if( this.id )\n\t    this.domElement.id = this.id;\n\t\n\t  if( this.classes )\n\t    this.domElement.className += ' ' + this.classes;\n\t\n\t  for( var attr in this.attributes ){\n\t    this.domElement.setAttribute(attr,this.attributes[attr]);\n\t  }\n\t\n\t  for( var ev in this.eventAndCallback ){\n\t\n\t    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n\t\n\t  }\n\t\n\t\n\t};\n\t\n\t//t is a string with the text for the ButtonShape\n\tButtonShape.prototype.updateText = function( text ){\n\t    if( typeof text !== 'string' )\n\t      console.error(': argument of updateText should be a string literal');\n\t\n\t    this.textContent = text;\n\t};\n\t\n\tButtonShape.prototype.render_ = function(){\n\t\n\t  if( this.textContent )\n\t    this.domElement.innerHTML = this.textContent;\n\t\n\t};\n\t\n\t\n\t\n\tmodule.exports = ButtonShape;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\t\n\tvar OptionShape = function( name, type ){\n\t\n\t  Shape.call( this, 'div', name );\n\t  if( typeof type !== 'string' )\n\t      console.error('indicate wether this is a radio or check group of options with a string');\n\t\n\t  this.type = '';\n\t  //setting input type, dom style\n\t  if( type === 'radio' )\n\t      this.type = 'radio';\n\t  else if( type === 'check' )\n\t      this.type = 'checkbox';\n\t\n\t  this.groupName = name;\n\t  this.structure = [];\n\t  this.domElements = [];\n\t  this.domElement;\n\t  this.changedOptionsValues = [];\n\t\n\t};\n\t/*OOP herency*/\n\tOptionShape.prototype = Object.create( Shape.prototype );\n\tOptionShape.prototype.contructor = OptionShape;\n\t/*OOP herency*/\n\t\n\tOptionShape.prototype.addOption = function( displayText, value, classForName, classForInput ){\n\t\n\t     if( !displayText || !value )\n\t          console.error('you should add an option with display and value arguments...');\n\t\n\t     this.structure.push({\n\t          display: displayText,\n\t          value: value,\n\t          classForName: ( classForName ) ? classForName : '',\n\t          classForInput: ( classForInput ) ? classForInput : ''\n\t     });\n\t\n\t};\n\t\n\tOptionShape.prototype.buildDom = function(){\n\t\n\t     this.domElement = document.createElement('div');\n\t\n\t     for (var i = 0; i < this.structure.length; i++ ) {\n\t\n\t          var optionUnit = {\n\t               container: document.createElement('div'),\n\t               input: null,\n\t               label: null,\n\t               name: null,\n\t               indicator: null\n\t          };\n\t\n\t          optionUnit.input = document.createElement('input');\n\t          optionUnit.input.type = this.type;\n\t          optionUnit.input.name = this.groupName;\n\t          optionUnit.input.value = this.structure[i].value;\n\t          optionUnit.input.className = this.structure[i].classForInput;\n\t          //optionUnit.container.appendChild( optionUnit.input );\n\t\n\t          optionUnit.label = document.createElement('label');\n\t          //optionUnit.label.innerHTML = this.structure[i].display;\n\t          optionUnit.label.className = this.structure[i].classForName;\n\t          optionUnit.label.appendChild( optionUnit.input );\n\t\n\t          optionUnit.name = document.createElement('span');\n\t          optionUnit.name.innerHTML = this.structure[i].display;\n\t          optionUnit.name.className = 'custom-control-description';\n\t          optionUnit.label.appendChild( optionUnit.name );\n\t\n\t          optionUnit.indicator = document.createElement('span');\n\t          optionUnit.indicator.className = 'custom-control-indicator';\n\t          optionUnit.label.appendChild( optionUnit.indicator );\n\t\n\t          optionUnit.container.appendChild( optionUnit.label );\n\t\n\t          optionUnit.container.className = 'form-check';\n\t\n\t          this.domElements.push( optionUnit );\n\t          //add the root dom element to attach to page\n\t          this.domElement.appendChild( optionUnit.container );\n\t\n\t     }\n\t\n\t     if( this.id )\n\t          this.domElement.id = this.id;\n\t\n\t     if( this.classes )\n\t          this.domElement.className += ' ' + this.classes;\n\t\n\t};\n\t\n\t//t is a string with the text for the OptionShape\n\tOptionShape.prototype.getSelectedOptions = function(){\n\t\n\t    var res = [];\n\t\n\t     for (var i = this.domElements.length; i--; ) {\n\t\n\t          if( this.domElements[i].input.checked )\n\t               res.push( this.domElements[i].input.value )\n\t\n\t     }\n\t\n\t     return res;\n\t};\n\t\n\tOptionShape.prototype.render_ = function(){\n\t\n\t     //no render need, yet\n\t\n\t};\n\t\n\t\n\tmodule.exports = OptionShape;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\t\n\tvar ImageShape = function( src, id ){\n\t  Shape.call( this, 'img', id );\n\t\n\t  if( typeof src !== 'string' )\n\t    console.error(': image src should be a string literal');\n\t\n\t  if( src ){\n\t    this.src = src;\n\t  }else{\n\t    console.error(': 3rd input shouldnt be null');\n\t  }\n\t\n\t  this.width;\n\t  this.height;\n\t\n\t};\n\t/*OOP herency*/\n\tImageShape.prototype = Object.create( Shape.prototype );\n\tImageShape.prototype.contructor = ImageShape;\n\t/*OOP herency*/\n\t\n\tImageShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t  this.domElement.src = this.src;\n\t\n\t  if( this.id )\n\t    this.domElement.id = this.id;\n\t\n\t  if( this.classes )\n\t    this.domElement.className += ' ' + this.classes;\n\t\n\t  if( this.width )\n\t    this.domElement.width = this.width;\n\t\n\t\n\t  if( this.height )\n\t    this.domElement.height = this.height;\n\t\n\t\n\t};\n\t\n\tImageShape.prototype.render_ = function(){\n\t\n\t  this.domElement.src = this.src;\n\t\n\t  if( this.width )\n\t    this.domElement.style.width = this.width + 'px';\n\t\n\t  if( this.height )\n\t    this.domElement.style.height = this.height + 'px';\n\t\n\t};\n\t\n\tImageShape.prototype.changeImage = function( src ){\n\t\n\t  if( typeof src !== 'string' )\n\t    console.error(': image src should be a string literal');\n\t\n\t  this.src = src;\n\t\n\t};\n\t\n\tImageShape.prototype.setWHpx = function( w, h ){\n\t\n\t  if( w && typeof w === 'number' ){\n\t    this.width = w;\n\t  }\n\t\n\t  if( h && typeof h === 'number' ){\n\t    this.height = h;\n\t  }\n\t\n\t};\n\t\n\tmodule.exports = ImageShape;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\t\n\tvar TextInputShape = function( id ){\n\t  Shape.call( this, 'input', id );\n\t  this.textContent = '';\n\t  this.name = '';\n\t};\n\t/*OOP herency*/\n\tTextInputShape.prototype = Object.create( Shape.prototype );\n\tTextInputShape.prototype.contructor = TextInputShape;\n\t/*OOP herency*/\n\t\n\tTextInputShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t  this.domElement.type = 'text';\n\t  this.domElement.value = this.textContent;\n\t\n\t  if( this.id )\n\t    this.domElement.id = this.id;\n\t\n\t  if( this.classes )\n\t    this.domElement.className += ' ' + this.classes;\n\t\n\t  if( this.name )\n\t      this.domElement.setAttribute('name', this.name);\n\t\n\t  for( var attr in this.attributes){\n\t    this.domElement.setAttribute(attr,this.attributes[attr]);\n\t  }\n\t\n\t};\n\t\n\t//t is a string with the text for the TextInputShape\n\tTextInputShape.prototype.getVal = function(){\n\t    if( !this.domElement )\n\t      console.error(': first build object DOM ->  buildDom()');\n\t\n\t    return this.domElement.value;\n\t};\n\t\n\t//t is a string with the text for the TextInputShape\n\tTextInputShape.prototype.setValue = function( value ){\n\t    if( typeof value !== 'string' )\n\t      console.error(': argument of updateText should be a string literal');\n\t\n\t    this.textContent = value;\n\t};\n\t\n\tTextInputShape.prototype.render_ = function(){\n\t\n\t  if( this.textContent )\n\t    this.domElement.value = this.textContent;\n\t\n\t};\n\t\n\tTextInputShape.prototype.setName = function(){\n\t\n\t  //you can set several classes like this 'clas1 class2 class3'\n\t\n\t  for ( var i = 0; i < arguments.length ; i++ ) {\n\t\n\t    if( typeof arguments[i] !== 'string' )\n\t      console.error(': Name should be a string literal');\n\t\n\t    this.name = arguments[i];\n\t  }\n\t\n\t};\n\t\n\tmodule.exports = TextInputShape;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\t\n\tvar TextShape = function( elem, id ){\n\t  Shape.call( this, elem, id );\n\t  this.textContent = '';\n\t};\n\t/*OOP herency*/\n\tTextShape.prototype = Object.create( Shape.prototype );\n\tTextShape.prototype.contructor = TextShape;\n\t/*OOP herency*/\n\t\n\tTextShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t  this.domElement.innerHTML = this.textContent;\n\t\n\t  if( this.id )\n\t    this.domElement.id = this.id;\n\t\n\t  if( this.classes )\n\t    this.domElement.className += ' ' + this.classes;\n\t\n\t\n\t};\n\t\n\t//t is a string with the text for the textShape\n\tTextShape.prototype.updateText = function( textContent ){\n\t\n\t    this.needsReRender = true;\n\t\n\t    if( typeof textContent !== 'string' )\n\t      console.error(': argument of updateText should be a string literal');\n\t\n\t    this.textContent = textContent;\n\t\n\t};\n\t\n\tTextShape.prototype.render_ = function(){\n\t\n\t  if( this.textContent )\n\t    this.domElement.innerHTML = this.textContent;\n\t\n\t};\n\t\n\t\n\tmodule.exports = TextShape;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Shape = __webpack_require__(1);\n\tvar TextInputShape = __webpack_require__(5);\n\tvar ButtonShape = __webpack_require__(2);\n\tvar OptionShape = __webpack_require__(3);\n\t\n\tvar FormShape = function( id ){\n\t  Shape.call( this, 'form', id );\n\t\n\t  //this.action = action;\n\t  this.method = '';\n\t  this.encoding = '';\n\t  this.submitTrigger;\n\t  this.data = {}; //remember this could be a file\n\t\n\t};\n\t/*OOP herency*/\n\tFormShape.prototype = Object.create( Shape.prototype );\n\tFormShape.prototype.contructor = FormShape;\n\t/*OOP herency*/\n\t\n\tFormShape.prototype.buildDom = function(){\n\t\n\t  if( this.elementName && !this.domElement )\n\t    this.domElement = document.createElement( this.elementName );\n\t\n\t  if( this.id )\n\t    this.domElement.id = this.id;\n\t\n\t  if( this.classes )\n\t    this.domElement.className += ' ' + this.classes;\n\t\n\t  if( this.action )\n\t    this.domElement.action = this.action;\n\t\n\t  if( this.method )\n\t    this.domElement.method = this.method;\n\t\n\t  if( this.encoding )\n\t    this.domElement.enctype = this.encoding;\n\t\n\t  if( !this.submitTrigger ){\n\t    console.error('You need a submit trigger for a form');\n\t  }\n\t\n\t\n\t  if(this.submitTrigger)\n\t    this.appendShape( this.submitTrigger );\n\t\n\t  for (var i = 0; i < this.childs.length; i++) {\n\t\n\t    if( !this.childs[i].domElement ){\n\t      this.childs[i].buildDom();\n\t    }\n\t\n\t    this.domElement.appendChild( this.childs[i].domElement );\n\t\n\t  }\n\t\n\t  //make submitTrigger button visible or invisible according to the flag setted at creation\n\t  if( !this.submitTrigger.visible )\n\t    this.submitTrigger.domElement.style.visibility = \"hidden\";\n\t\n\t  for( var ev in this.eventAndCallback ){\n\t    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n\t  }\n\t\n\t};\n\t\n\t\n\tFormShape.prototype.setAction = function(action){\n\t\n\t  if( action )\n\t    this.action = action;\n\t\n\t};\n\t\n\tFormShape.prototype.setMethod = function(method){\n\t\n\t  if( method )\n\t    this.method = method;\n\t\n\t};\n\t\n\tFormShape.prototype.setEncoding = function(encoding){\n\t\n\t  if( encoding )\n\t    this.encoding = encoding;\n\t\n\t};\n\t\n\tFormShape.prototype.addSection = function( childSection ){\n\t\n\t  if( childSection instanceof Shape ){\n\t\n\t    this.appendShape( childSection );\n\t    console.log( this.childs );\n\t\n\t  }else{\n\t    console.error('The argument should be a Shape object');\n\t  }\n\t\n\t};\n\t\n\tFormShape.prototype.setSubmitTrigger = function( text ){\n\t  //un trigger puede ser un boton, como puede ser un TECLA\n\t  if( typeof text !== 'string' )\n\t    console.error('Argument should be a string containing text of submit button, if no text submit will be not visible');\n\t\n\t  var st;\n\t  if ( text !== '' ) {\n\t    st = new ButtonShape( text );\n\t    //lets set a flag in this object to account for ti later on buildDom\n\t    st.visible = true;\n\t  }else{\n\t    st = new ButtonShape('');\n\t  }\n\t\n\t  this.submitTrigger = st;\n\t\n\t  return st;\n\t};\n\t\n\tFormShape.prototype.sendData = function( evt ){\n\t\n\t  evt.preventDefault();\n\t  //TODO: lib that structure requests for our framework :)\n\t\n\t\n\t};\n\t\n\tFormShape.prototype.serializeForm = function(){\n\t\n\t  this.serializeElement( this );\n\t  return this.data;\n\t\n\t};\n\t\n\tFormShape.prototype.serializeElement = function( theShape ){\n\t\n\t  for( var i = 0; i < theShape.childs.length; ++i ) {\n\t\n\t    var name;\n\t    var value;\n\t\n\t    var element = theShape.childs[i];\n\t\n\t    if( element instanceof TextInputShape ){\n\t      name = element.id;\n\t      value = element.getVal();\n\t\n\t    }else if ( element instanceof OptionShape ) {\n\t      name = element.id;\n\t      value = element.getSelectedOptions();\n\t    }else{\n\t      //continue;\n\t    }\n\t    if( name ) {\n\t       this.data[ name ] = value;\n\t    }\n\t\n\t    if( element.childs.length > 0 ){\n\t      this.serializeElement( element );\n\t    }\n\t\n\t  }\n\t\n\t};\n\t\n\tFormShape.prototype.render_ = function(){\n\t\n\t};\n\t\n\tmodule.exports = FormShape;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// domshaper.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3d8107c62356b98f0e00","var Shape = require('./shapes/Shape.js');\nvar ButtonShape = require('./shapes/ButtonShape.js');\nvar OptionShape = require('./shapes/OptionShape.js');\nvar ImageShape = require('./shapes/ImageShape.js');\nvar TextInputShape = require('./shapes/TextInputShape.js');\nvar TextShape = require('./shapes/TextShape.js');\nvar FormShape = require('./shapes/FormShape.js');\n\nexports.Shape = Shape; \nexports.ButtonShape = ButtonShape;\nexports.OptionShape = OptionShape;\nexports.ImageShape = ImageShape;\nexports.TextInputShape = TextInputShape;\nexports.TextShape = TextShape;\nexports.FormShape = FormShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0","var Shape = function( elem, id ){\n\n  this.id = ( id )? id : null;\n  this.domElement;\n  this.childs = [];\n  this.classes = '';\n  this.parent;\n  this.needsRender = true;\n  this.attributes = {};\n\n  //fo the eventa\n  this.eventAndCallback = {};\n\n\n  if( !elem ){\n    console.error('Element should be a DOM node or a string literal');\n  }\n\n  if( typeof elem === 'string' ){\n    this.elementName = ( elem )? elem : null;\n  }\n\n  if( elem.nodeName ){\n    this.domElement = elem;\n  }\n\n};\n\nShape.prototype.appendShape = function( shapeToAppend ){\n\n  if( shapeToAppend instanceof Shape ){\n\n    //add the Shape object to the childs array\n    shapeToAppend.parent  = this;\n    this.childs.push( shapeToAppend );\n\n  }else if( typeof shapeToAppend === 'string' ){\n\n    var childShape = new Shape( shapeToAppend, null );\n    childShape.parent = this;\n    this.childs.push( childShape );\n\n  }else{\n    console.error('only shape or string as arguments, gtfo');\n    //we dont want to stop the main thread for this misuse\n  }\n\n};\n\nShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n  for( var attr in this.attributes){\n    this.domElement.setAttribute(attr,this.attributes[attr]);\n  }\n\n  for (var i = 0; i < this.childs.length; i++) {\n\n    if( !this.childs[i].domElement ){\n      this.childs[i].buildDom();\n    }\n\n\n    this.domElement.appendChild( this.childs[i].domElement );\n\n  }\n\n  for( var ev in this.eventAndCallback ){\n\n    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n\n  }\n\n\n};\n\nShape.prototype.render = function(){\n\n  if( !this.needsRender ){\n    this.render_();\n  }\n\n  if( this.childs ){\n    for (var i = 0; i < this.childs.length; i++) {\n      //render all childs shit\n      this.childs[i].render();\n    }\n  }\n\n  this.needsRender = false;\n\n};\n\nShape.prototype.render_ = function(){\n\n};\n\n//event listener\n//choose your listener using a string\nShape.prototype.on = function( event, callback ){\n  //all listener here? maybe :)\n  if( typeof event !== 'string' ){\n    console.error('use string identifiers for events');\n  }\n\n  this.eventAndCallback[event] = callback;\n\n};\n\nShape.prototype.removeAllChilds = function(){\n\n  while (this.domElement.firstChild) {\n    this.domElement.removeChild(this.domElement.firstChild);\n  }\n\n  for (var i = this.childs.length - 1; i >= 0 ; i--) {\n    this.childs[i].parent = null;\n    this.childs.splice(i, 1);\n  }\n\n};\n\n\nShape.prototype.removeShape = function( childShape ){\n\n  var reference;\n  if( childShape instanceof Shape ){\n    //add the Shape object to the childs array\n    for (var i = this.childs.length - 1; i >= 0; i--) {\n      if( this.childs[i] === childShape){\n        reference = this.childs.splice( i, 1 )[0];\n        break;\n      }\n    }\n\n  }else{\n    console.error(': argument should be a Shape object');\n  }\n\n  //remove interface\n  if( reference )\n    this.domElement.removeChild( reference.domElement );\n\n  //return reference; this only make sense if the argument is a string literal referring a dom element name\n\n};\n\nShape.prototype.setClass = function(){\n\n  //you can set several classes like this 'clas1 class2 class3'\n\n  for ( var i = 0; i < arguments.length ; i++ ) {\n\n    if( typeof arguments[i] !== 'string' )\n      console.error(': className should be a string literal');\n\n    this.classes += ( ' ' + arguments[i] );\n  }\n  //this.classes = classes;\n\n};\n\nShape.prototype.setId = function( id ){\n\n  //you can set several classes like this 'clas1 class2 class3'\n  if( typeof id !== 'string' )\n    console.error(': id should be a string literal');\n\n  this.id = id;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n};\n\nShape.prototype.addAttr = function( name , value ){\n\n  //you can set several classes like this 'clas1 class2 class3'\n  if( typeof name !== 'string' )\n    console.error(': name should be a string literal');\n\n  if( !value || (typeof value !== 'string' && typeof value !== 'number') )\n    console.error(': value shouldnt be empty, use number or string');\n\n  this.attributes[name] = value;\n\n};\n\n\nmodule.exports = Shape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/Shape.js\n// module id = 1\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar ButtonShape = function( buttonText, id ){\n  Shape.call( this, 'button', id );\n  this.textContent = buttonText;\n};\n/*OOP herency*/\nButtonShape.prototype = Object.create( Shape.prototype );\nButtonShape.prototype.contructor = ButtonShape;\n/*OOP herency*/\n\nButtonShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.domElement.innerHTML = this.textContent;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n  for( var attr in this.attributes ){\n    this.domElement.setAttribute(attr,this.attributes[attr]);\n  }\n\n  for( var ev in this.eventAndCallback ){\n\n    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n\n  }\n\n\n};\n\n//t is a string with the text for the ButtonShape\nButtonShape.prototype.updateText = function( text ){\n    if( typeof text !== 'string' )\n      console.error(': argument of updateText should be a string literal');\n\n    this.textContent = text;\n};\n\nButtonShape.prototype.render_ = function(){\n\n  if( this.textContent )\n    this.domElement.innerHTML = this.textContent;\n\n};\n\n\n\nmodule.exports = ButtonShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/ButtonShape.js\n// module id = 2\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar OptionShape = function( name, type ){\n\n  Shape.call( this, 'div', name );\n  if( typeof type !== 'string' )\n      console.error('indicate wether this is a radio or check group of options with a string');\n\n  this.type = '';\n  //setting input type, dom style\n  if( type === 'radio' )\n      this.type = 'radio';\n  else if( type === 'check' )\n      this.type = 'checkbox';\n\n  this.groupName = name;\n  this.structure = [];\n  this.domElements = [];\n  this.domElement;\n  this.changedOptionsValues = [];\n\n};\n/*OOP herency*/\nOptionShape.prototype = Object.create( Shape.prototype );\nOptionShape.prototype.contructor = OptionShape;\n/*OOP herency*/\n\nOptionShape.prototype.addOption = function( displayText, value, classForName, classForInput ){\n\n     if( !displayText || !value )\n          console.error('you should add an option with display and value arguments...');\n\n     this.structure.push({\n          display: displayText,\n          value: value,\n          classForName: ( classForName ) ? classForName : '',\n          classForInput: ( classForInput ) ? classForInput : ''\n     });\n\n};\n\nOptionShape.prototype.buildDom = function(){\n\n     this.domElement = document.createElement('div');\n\n     for (var i = 0; i < this.structure.length; i++ ) {\n\n          var optionUnit = {\n               container: document.createElement('div'),\n               input: null,\n               label: null,\n               name: null,\n               indicator: null\n          };\n\n          optionUnit.input = document.createElement('input');\n          optionUnit.input.type = this.type;\n          optionUnit.input.name = this.groupName;\n          optionUnit.input.value = this.structure[i].value;\n          optionUnit.input.className = this.structure[i].classForInput;\n          //optionUnit.container.appendChild( optionUnit.input );\n\n          optionUnit.label = document.createElement('label');\n          //optionUnit.label.innerHTML = this.structure[i].display;\n          optionUnit.label.className = this.structure[i].classForName;\n          optionUnit.label.appendChild( optionUnit.input );\n\n          optionUnit.name = document.createElement('span');\n          optionUnit.name.innerHTML = this.structure[i].display;\n          optionUnit.name.className = 'custom-control-description';\n          optionUnit.label.appendChild( optionUnit.name );\n\n          optionUnit.indicator = document.createElement('span');\n          optionUnit.indicator.className = 'custom-control-indicator';\n          optionUnit.label.appendChild( optionUnit.indicator );\n\n          optionUnit.container.appendChild( optionUnit.label );\n\n          optionUnit.container.className = 'form-check';\n\n          this.domElements.push( optionUnit );\n          //add the root dom element to attach to page\n          this.domElement.appendChild( optionUnit.container );\n\n     }\n\n     if( this.id )\n          this.domElement.id = this.id;\n\n     if( this.classes )\n          this.domElement.className += ' ' + this.classes;\n\n};\n\n//t is a string with the text for the OptionShape\nOptionShape.prototype.getSelectedOptions = function(){\n\n    var res = [];\n\n     for (var i = this.domElements.length; i--; ) {\n\n          if( this.domElements[i].input.checked )\n               res.push( this.domElements[i].input.value )\n\n     }\n\n     return res;\n};\n\nOptionShape.prototype.render_ = function(){\n\n     //no render need, yet\n\n};\n\n\nmodule.exports = OptionShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/OptionShape.js\n// module id = 3\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar ImageShape = function( src, id ){\n  Shape.call( this, 'img', id );\n\n  if( typeof src !== 'string' )\n    console.error(': image src should be a string literal');\n\n  if( src ){\n    this.src = src;\n  }else{\n    console.error(': 3rd input shouldnt be null');\n  }\n\n  this.width;\n  this.height;\n\n};\n/*OOP herency*/\nImageShape.prototype = Object.create( Shape.prototype );\nImageShape.prototype.contructor = ImageShape;\n/*OOP herency*/\n\nImageShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.domElement.src = this.src;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n  if( this.width )\n    this.domElement.width = this.width;\n\n\n  if( this.height )\n    this.domElement.height = this.height;\n\n\n};\n\nImageShape.prototype.render_ = function(){\n\n  this.domElement.src = this.src;\n\n  if( this.width )\n    this.domElement.style.width = this.width + 'px';\n\n  if( this.height )\n    this.domElement.style.height = this.height + 'px';\n\n};\n\nImageShape.prototype.changeImage = function( src ){\n\n  if( typeof src !== 'string' )\n    console.error(': image src should be a string literal');\n\n  this.src = src;\n\n};\n\nImageShape.prototype.setWHpx = function( w, h ){\n\n  if( w && typeof w === 'number' ){\n    this.width = w;\n  }\n\n  if( h && typeof h === 'number' ){\n    this.height = h;\n  }\n\n};\n\nmodule.exports = ImageShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/ImageShape.js\n// module id = 4\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar TextInputShape = function( id ){\n  Shape.call( this, 'input', id );\n  this.textContent = '';\n  this.name = '';\n};\n/*OOP herency*/\nTextInputShape.prototype = Object.create( Shape.prototype );\nTextInputShape.prototype.contructor = TextInputShape;\n/*OOP herency*/\n\nTextInputShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.domElement.type = 'text';\n  this.domElement.value = this.textContent;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n  if( this.name )\n      this.domElement.setAttribute('name', this.name);\n\n  for( var attr in this.attributes){\n    this.domElement.setAttribute(attr,this.attributes[attr]);\n  }\n\n};\n\n//t is a string with the text for the TextInputShape\nTextInputShape.prototype.getVal = function(){\n    if( !this.domElement )\n      console.error(': first build object DOM ->  buildDom()');\n\n    return this.domElement.value;\n};\n\n//t is a string with the text for the TextInputShape\nTextInputShape.prototype.setValue = function( value ){\n    if( typeof value !== 'string' )\n      console.error(': argument of updateText should be a string literal');\n\n    this.textContent = value;\n};\n\nTextInputShape.prototype.render_ = function(){\n\n  if( this.textContent )\n    this.domElement.value = this.textContent;\n\n};\n\nTextInputShape.prototype.setName = function(){\n\n  //you can set several classes like this 'clas1 class2 class3'\n\n  for ( var i = 0; i < arguments.length ; i++ ) {\n\n    if( typeof arguments[i] !== 'string' )\n      console.error(': Name should be a string literal');\n\n    this.name = arguments[i];\n  }\n\n};\n\nmodule.exports = TextInputShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/TextInputShape.js\n// module id = 5\n// module chunks = 0","var Shape = require('./Shape.js');\n\nvar TextShape = function( elem, id ){\n  Shape.call( this, elem, id );\n  this.textContent = '';\n};\n/*OOP herency*/\nTextShape.prototype = Object.create( Shape.prototype );\nTextShape.prototype.contructor = TextShape;\n/*OOP herency*/\n\nTextShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  this.domElement.innerHTML = this.textContent;\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n\n};\n\n//t is a string with the text for the textShape\nTextShape.prototype.updateText = function( textContent ){\n\n    this.needsReRender = true;\n\n    if( typeof textContent !== 'string' )\n      console.error(': argument of updateText should be a string literal');\n\n    this.textContent = textContent;\n\n};\n\nTextShape.prototype.render_ = function(){\n\n  if( this.textContent )\n    this.domElement.innerHTML = this.textContent;\n\n};\n\n\nmodule.exports = TextShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/TextShape.js\n// module id = 6\n// module chunks = 0","var Shape = require('./Shape.js');\nvar TextInputShape = require('./TextInputShape.js');\nvar ButtonShape = require('./ButtonShape.js');\nvar OptionShape = require('./OptionShape.js');\n\nvar FormShape = function( id ){\n  Shape.call( this, 'form', id );\n\n  //this.action = action;\n  this.method = '';\n  this.encoding = '';\n  this.submitTrigger;\n  this.data = {}; //remember this could be a file\n\n};\n/*OOP herency*/\nFormShape.prototype = Object.create( Shape.prototype );\nFormShape.prototype.contructor = FormShape;\n/*OOP herency*/\n\nFormShape.prototype.buildDom = function(){\n\n  if( this.elementName && !this.domElement )\n    this.domElement = document.createElement( this.elementName );\n\n  if( this.id )\n    this.domElement.id = this.id;\n\n  if( this.classes )\n    this.domElement.className += ' ' + this.classes;\n\n  if( this.action )\n    this.domElement.action = this.action;\n\n  if( this.method )\n    this.domElement.method = this.method;\n\n  if( this.encoding )\n    this.domElement.enctype = this.encoding;\n\n  if( !this.submitTrigger ){\n    console.error('You need a submit trigger for a form');\n  }\n\n\n  if(this.submitTrigger)\n    this.appendShape( this.submitTrigger );\n\n  for (var i = 0; i < this.childs.length; i++) {\n\n    if( !this.childs[i].domElement ){\n      this.childs[i].buildDom();\n    }\n\n    this.domElement.appendChild( this.childs[i].domElement );\n\n  }\n\n  //make submitTrigger button visible or invisible according to the flag setted at creation\n  if( !this.submitTrigger.visible )\n    this.submitTrigger.domElement.style.visibility = \"hidden\";\n\n  for( var ev in this.eventAndCallback ){\n    this.domElement.addEventListener( ev, this.eventAndCallback[ev] );\n  }\n\n};\n\n\nFormShape.prototype.setAction = function(action){\n\n  if( action )\n    this.action = action;\n\n};\n\nFormShape.prototype.setMethod = function(method){\n\n  if( method )\n    this.method = method;\n\n};\n\nFormShape.prototype.setEncoding = function(encoding){\n\n  if( encoding )\n    this.encoding = encoding;\n\n};\n\nFormShape.prototype.addSection = function( childSection ){\n\n  if( childSection instanceof Shape ){\n\n    this.appendShape( childSection );\n    console.log( this.childs );\n\n  }else{\n    console.error('The argument should be a Shape object');\n  }\n\n};\n\nFormShape.prototype.setSubmitTrigger = function( text ){\n  //un trigger puede ser un boton, como puede ser un TECLA\n  if( typeof text !== 'string' )\n    console.error('Argument should be a string containing text of submit button, if no text submit will be not visible');\n\n  var st;\n  if ( text !== '' ) {\n    st = new ButtonShape( text );\n    //lets set a flag in this object to account for ti later on buildDom\n    st.visible = true;\n  }else{\n    st = new ButtonShape('');\n  }\n\n  this.submitTrigger = st;\n\n  return st;\n};\n\nFormShape.prototype.sendData = function( evt ){\n\n  evt.preventDefault();\n  //TODO: lib that structure requests for our framework :)\n\n\n};\n\nFormShape.prototype.serializeForm = function(){\n\n  this.serializeElement( this );\n  return this.data;\n\n};\n\nFormShape.prototype.serializeElement = function( theShape ){\n\n  for( var i = 0; i < theShape.childs.length; ++i ) {\n\n    var name;\n    var value;\n\n    var element = theShape.childs[i];\n\n    if( element instanceof TextInputShape ){\n      name = element.id;\n      value = element.getVal();\n\n    }else if ( element instanceof OptionShape ) {\n      name = element.id;\n      value = element.getSelectedOptions();\n    }else{\n      //continue;\n    }\n    if( name ) {\n       this.data[ name ] = value;\n    }\n\n    if( element.childs.length > 0 ){\n      this.serializeElement( element );\n    }\n\n  }\n\n};\n\nFormShape.prototype.render_ = function(){\n\n};\n\nmodule.exports = FormShape;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/shapes/FormShape.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}